security:

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # enable_authenticator_manager: true
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: pseudo
    role_hierarchy:
        ROLE_LIBRARIAN: ROLE_USER
        ROLE_ADMIN: ROLE_LIBRARIAN
        ROLE_SUPERADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            provider: app_user_provider
            # form_login:
            #     login_path: login
            #     check_path: login_check
            #     username_parameter: pseudo
            #     password_parameter: password
            #     default_target_path: /
            #     use_referer: true 
            guard:
                authenticators:
                    - App\Security\MediathequeAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    access_control:
    # require ROLE_ADMIN for /admin*
    - { path: '^/admin', roles: ROLE_ADMIN }
    #- { path: '^/employee', roles: ROLE_SUPERADMIN }

    # - { path: '^/user', roles: ROLE_USER}

    # # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
    # - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

    # the 'path' value can be any valid regular expression
    # (this one will match URLs like /api/post/7298 and /api/comment/528491)
    # - { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }

    encoders:
    # use your user class name here
        App\Entity\User:
    #         # Use native password encoder
    #         # This value auto-selects the best possible hashing algorithm
    #         # (i.e. Sodium when available).
            algorithm: auto

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
